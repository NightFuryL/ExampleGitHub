#include <iostream>

using namespace std;

int main()
{
	cout << "It Step is the best academy!\n";
	cout << "I love C++ programming!\n";//dfdsf
	int a =433;
}
//Відео без звуку! якщо хочете купити мені мікрофон то ось реквізити 4441 1111 5673 5163 (Monobank) :)))
//Сподіваюсь, що ви знайомі із GitHub та Git взагалом
//Для того, щоб відправити цей файл на GitHub, потрібно зробити наступне:
//Відкриваємо вікно Git Changes
	//Якщо його немає, то йдемо до View -> Git Changes
//Натискаємо на кнопку Create a Git Repository
//Обираємо папку, де буде зберігатися репозиторій
	//Розбираємо кожний пункт:
	//0. Local path - це шлях до папки, де буде зберігатися репозиторій
	//1. .gitignore - це файл, в якому вказуються файли та папки, які не потрібно відслідковувати Git-ом
		//Є шаблони для різних мов програмування
	//2. License - це файл, в якому вказується ліцензія на використання коду(для тго, щоб інші люди знали, 
																	//що вони можуть робити з вашим кодом)
	//3. Readme - це файл, в якому можна описати проект(Синтаксис Markdown схожий на HTML)
	//4. Accout - це обліковий запис GitHub, який буде використовуватися для відправки змін на GitHub
		//Обирао свій акаунт,якщо його немає, то потрібно додати
	//5. Owner - це власник репозиторію(якщо ви працюєте в організації, то можна вибрати організацію)
	//6. Repository name - це назва репозиторію(якщо репозиторій публічний, то назва повинна бути унікальною)
		//Тут краще вказати назву проекту,щоб було зрозуміло,що це за проект або назву завдання/курсу
	//7. Description - це опис репозиторію(необов'язково,він буде відображатися на сторінці репозиторію)
	//8. Visibility - це видимість репозиторію(публічний або приватний) (тут треба зробити акцент!!!)
		//В нашому випадку обираємо Public,щоб вчитель МІГ ПОБАЧИТИ ваш код,якщо буде Private,
													//то тільки ви зможете бачити цей репозиторій
	//9. Потім як все обрали,натискаємо на кнопку Create and Push(створити і відправити)
	//Після цього репозиторій буде створений та всі файли з вашої папки будуть відправлені на GitHub
//===========================================================================================================================
//Тепер розглянемо,як працювати з Git та GitHub
//Щоб внести зміни в репозиторій, потрібно зробити наступне:
		//1. Вносимо зміни в код(наприклад, додаємо новий рядок або будь-який інший код)
			//cout << "I love C++ programming!\n";
		//2. Переходимо в вікно Git Changes
		//3. В полі Message(повідомлення) пишемо короткий опис змін(наприклад, "New line"),
											//це обов'язково,бо без цього не можна буде відправити зміни
		//4. Натискаємо на кнопку Commit All(зафіксувати всі зміни)
			//Це означає,що ми зберігаємо зміни в локальному репозиторії(на нашому комп'ютері)
			//Якщо ви хочете зафіксувати тільки окремі файли,
				//то можна натиснути на кнопку Commit Staged(зафіксувати вибрані файли)
			//Після цього зміни будуть зафіксовані в локальному репозиторії
		//5. Після цього натискаємо на кнопку Push(відправити)
			//Або можна натиснути на стрілочку біля кнопки Commit All 
									//і обрати Commit All and Push(зафіксувати всі зміни і відправити)
			//якщо вибрати Commit All and Sync то це означає,що зміни будуть зафікосвані,
											//потім стягнуті зміни з GitHub і потім відправлені на GitHub
			//Якщо вибрати Stash All(--include Untracked),то зміни будуть збережені в тимчасове сховище
			//(це корисно,якщо ви хочете переключитися на іншу гілку і не хочете втратити зміни)
			//Якщо вибрати Stash All and Keep Staged(--keeped- index),
			//то зміни будуть збережені в тимчасове сховище,але файли,
							//які були зафіксовані залишаться зафіксованими
//Щоб стягнути зміни з GitHub, потрібно натиснути на кнопку Pull(витягнути)
	//Якщо є конфлікти,то потрібно їх вирішити(конфлікти виникають,
												//коли ви і хтось інший вносите зміни в один і той же файл)
//В успішному випадку ви побачите повідомлення,що зміни були стягнуті
//Чекбокс Amend потрібен ,якщо ви хочете змінити останній коміт
												//(наприклад,додати ще один файл або змінити повідомлення)
//Fetch from ... - це команда,яка дозволяє отримати останні зміни з віддаленого репозиторію(на GitHub),
																//але не зливає їх з вашим локальним репозиторієм
//Це корисно,якщо ви хочете побачити,які зміни були зроблені іншими людьми,але не хочете зливати їх з вашим кодом
//===========================================================================================================================
//Такод можно побачити всі зміни(коміти) у вигляді графіку
//Для цього треба перейти Git Changes -> View all commits
//Зробимо Pull Request,спочатку що це таке?
//Pull Request - це запит на злиття змін з однієї гілки в іншу(зазвичай з вашої гілки в основну гілку(main|master))
//Для цього потрібно зробити наступне:
	//1. Переходимо на GitHub в ваш(будь-який) репозиторій
	//2. Натискаємо на Fork(створити копію репозиторію)	
		//Це створить копію репозиторію в вашому акаунті
	//3. Робимо зміни в коді(наприклад, додаємо новий рядок або будь-який інший код)
		//Воно буде відображатися тільки у вашому репозиторії,для того,щоб внести зміни в основний репозиторій,
																				//потрібно зробити Pull Request
	//4 Натискаємо на кнопку Contribute(зробити внесок) -> Open Pull Request(Це означає,
									//що ви хочете запропонувати свої зміни для злиття в основний репозиторій)
		//Можно додати коментар до Pull Request,щоб пояснити,що ви зробили
//Якщо ви працюєте в команді,то зазвичай хтось інший буде перевіряти ваш код і зливати його в основну гілку
//Так і в нашому випадку вчитель буде перевіряти ваш код і зливати його або ні
//Якщо все добре,то ваші зміни будуть злиті в основний репозиторій і ви побачите повідомлення,
																//що Pull Request був злитий
//Якщо є конфлікти,то вчитель напише вам коментар,що потрібно виправити
//Тут можно подивитися ваші Pull Request-и
//===========================================================================================================================
